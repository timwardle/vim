snippet php
	<?php
	${1}
snippet ec
	echo "${1:string}"${2};
snippet inc
	include '${1:file}';${2}
snippet inc1
	include_once '${1:file}';${2}
snippet req
	require '${1:file}';${2}
snippet req1
	require_once '${1:file}';${2}
# $GLOBALS['...']
snippet globals
	$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${5}
snippet $_ COOKIE['...']
	$_COOKIE['${1:variable}']${2}
snippet $_ ENV['...']
	$_ENV['${1:variable}']${2}
snippet $_ FILES['...']
	$_FILES['${1:variable}']${2}
snippet $_ Get['...']
	$_GET['${1:variable}']${2}
snippet $_ POST['...']
	$_POST['${1:variable}']${2}
snippet $_ REQUEST['...']
	$_REQUEST['${1:variable}']${2}
snippet $_ SERVER['...']
	$_SERVER['${1:variable}']${2}
snippet $_ SESSION['...']
	$_SESSION['${1:variable}']${2}
# Start Docblock
snippet /*
	/**
	 * ${1}
	 */
# Class - post doc
snippet doc_cp
	/*
	 * ${1:undocumented class}
	 *
	 * @package ${2:default}
	 * @author ${3:`g:snips_author`}
	 */${4}
# Class Variable - post doc
snippet doc_vp
	/**
	 * ${1:undocumented class variable}
	 *
	 * @var ${2:string}
	 */${3}
# Class Variable
snippet doc_v
	/**
	 * ${3:undocumented class variable}
	 *
	 * @var ${4:string}
	 */
	${1:var} $${2};${5}
# Class
snippet doc_c
	/**
	 * ${3:undocumented class}
	 *
	 * @packaged ${4:default}
	 * @author ${5:`g:snips_author`}
	 */
	${1:}class ${2:}
	{${6}
	} // END $1class $2
# Constant Definition - post doc
snippet doc_dp
# Constant Definition
snippet doc_d
	/**
	 * ${3:undocumented constant}
	 */
	define(${1}, ${2});${4}
# Function
snippet doc_f
	/**
	 * ${1}
	 * ${2}
	 * @return ${3}
	 */
# Header
snippet doc_h
	/**
	 * @copyright Copyright (c) `strftime('%Y')`, Protec Innovations Ltd
	 * @package ${1}
	 * @subpackage ${2}
	 */
	
	${3}
# Document inherit from parent
snippet doc_inherit
	/**
	 * @inheritdoc
	 */
# Interface
snippet doc_i
	/**
	 * ${2:undocumented class}
	 *
	 * @package ${3:default}
	 * @author ${4:`g:snips_author`}
	 */
	interface ${1:}
	{${5}
	} // END interface $1
# class ...
snippet class
	/**
	 * ${1}
	 */
	class ${2:ClassName} {
		${6:// code...}
	}
# test case ...
snippet class_test
	class ${1:}Test extends ${2:Protec_Test_PHPUnit_TestCase} {
	
		/**
		 * @var $1
		 */
		private $_${3:target};

		public function setUp() {
			parent::setUp();

			$this->_$3 = new $1();
		}

		${4:// Tests...}
	}
# model test case...
snippet class_test_model
	class ${1:}Test extends Protec_Test_PHPUnit_ModelTestCase {
		
		protected function _getModelName() {
			return '$1';
		}

		${2:// Tests...}
	}

# function...
snippet fun
	${1:public }function ${2:FunctionName}(${3}) {
		${4:// code...}
	}
# getter and setter functions...
snippet fun_get_set
	/**
	 * ${1:Returns the ${2:}}
	 *
	 * @return ${3:type}
	 */
	public function get${4:Property}() {
		return $this->_${5:$4};
	}

	/**
	 * ${6:Sets the $2}
	 *
	 * @param $${7:value} $3 ${8:}
	 */
	public function set$4($$7) {
		$this->_$5 = $$7;
	}

	${8:}
# tests for getter and setter functions...
snippet test_get_set
	public function testSet${1:Property}() {
		$value = ${2};

		$this->_${3:model}->set$1($value);

		$result = $this->_$3->get$1();

		$this->assertEquals($value, $result);
	}

	public function testGet$1() {
		// testSet$1() is sufficient
		$this->testSet$1();
	}

	${4}
snippet wh
	while (${1:/* condition */}) {
		${2:// code...}
	}
# do ... while
snippet do
	do {
		${2:// code... }
	} while (${1:/* condition */});
snippet if
	if (${1:/* condition */}) {
		${2:// code...}
	}
snippet ife
	if (${1:/* condition */}) {
		${2:// code...}
	} else {
		${3:// code...}
	}
	${4}
snippet else
	else {
		${1:// code...}
	}
snippet elseif
	elseif (${1:/* condition */}) {
		${2:// code...}
	}
# Tertiary conditional
snippet t
	$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
snippet switch
	switch ($${1:variable}) {
		case '${2:value}':
			${3:// code...}
			break;
		${5}
		default:
			${4:// code...}
			break;
	}
snippet case
	case '${1:value}':
		${2:// code...}
		break;${3}
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4: // code...}
	}
snippet foreach
	foreach ($${1:variable} as $${2:key}) {
		${3:// code...}
	}
# $... = array (...)
snippet array
	$${1:arrayName} = array('${2}' => ${3});${4}
